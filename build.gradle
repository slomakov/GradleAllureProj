import java.nio.charset.StandardCharsets


buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
    }
}

plugins {
    id 'io.qameta.allure' version '2.8.1'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'idea'

ext {
    encoding = StandardCharsets.UTF_8.name()
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
    mavenCentral()
}

allure {
    autoconfigure = true
    aspectjweaver = true
    version = '2.13.8'

    useTestNG {
        autoconfigure(true)
    }
}

dependencies {
    implementation group: 'org.testng', name: 'testng', version: '7.4.0'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    implementation group: 'io.qameta.allure', name: 'allure-testng', version: '2.13.8'
    implementation group: 'io.qameta.allure', name: 'allure-rest-assured', version: '2.13.8'
    implementation group: 'io.qameta.allure', name: 'allure-java-commons', version: '2.13.8'
    implementation group: 'org.aspectj', name: 'aspectjweaver', version: '1.9.6'
    implementation "io.rest-assured:rest-assured:4.3.3"
    implementation "org.slf4j:slf4j-api:1.7.5"
    testImplementation "org.slf4j:slf4j-log4j12:1.7.5"
    implementation "org.apache.logging.log4j:log4j-api:2.12.0"
    implementation "org.apache.logging.log4j:log4j-core:2.12.0"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.12.0"
    implementation "org.hamcrest:hamcrest-core:2.2"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.0.1"
    implementation "com.google.code.gson:gson:2.8.7"
    compileOnly "org.projectlombok:lombok:1.18.20"
    annotationProcessor "org.projectlombok:lombok:1.18.20"
    testCompileOnly "org.projectlombok:lombok:1.18.20"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.20"
    testImplementation('io.qameta.allure:allure-selenide:2.13.1')
    implementation('com.codeborne:selenide:5.6.1')
}

test {
    def runSuite = project.hasProperty("suite")
    useTestNG() {
        if (runSuite) {
            def suiteToRun = project.getProperty("suite")
            suites "src/test/resources/suites/" + suiteToRun
        }
    }
    systemProperties(System.getProperties())
    reports {
        html.enabled true
    }
}

idea {
    module {
        downloadJavadoc = true
    }
}

tasks.withType(Test) {
    /*
    * Enable JUnit Platform (JUnit 5) support, default is JUnit
    */
    useTestNG()

    /*
    * Make failing tests do not fail the task
    */
    ignoreFailures = true

    /*
    * If any upToDateWhen spec returns false, the task is considered out of date.
    * If they return true, Gradle does the normal behavior of checking input/output files.
    */
    outputs.upToDateWhen { false }

    /*
    * To show standard out and standard error of the test JVM(s) on the console
    */
    testLogging.showStandardStreams = true

    /*
    *  Want to display the following test events
    */
    testLogging { events 'passed', 'skipped', 'failed' }

    /*
    * When the JVM starts, it uses the JVMs platform encoding
    */
    systemProperty('file.encoding', encoding)

    /*
    * To make the Gradle JVM system properties available to tests
    */
    systemProperties = System.getProperties() as Map<String, ?>
}

configurations {
    testCompile
}
